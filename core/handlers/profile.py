from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from core.database.database import Database
from core.keyboards.profile import profile_keyboard, confirm_delete_keyboard, cancel_keyboard
from core.keyboards.main import main_keyboard, admin_keyboard
from core.states.states import ProfileStates
from datetime import datetime, timedelta
from core.utils.logger import bot_logger
from core.config.settings import settings

router = Router()
db = Database('bot_database.db')

@router.message(F.text == 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def profile(message: Message, telegram_id: int = None):
    user_id = telegram_id or message.from_user.id
    bot_logger.log_action(user_id, "–û—Ç–∫—Ä—ã—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    user = db.get_user(user_id)
    if not user:
        db.create_user(user_id, message.from_user.username)
        user = db.get_user(user_id)

    registration_date = datetime.strptime(user['registration_date'], '%Y-%m-%d %H:%M:%S')
    registration_date = registration_date + timedelta(hours=3)
    formatted_date = registration_date.strftime('%d.%m.%Y %H:%M')

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"<b>–†–æ–ª—å:</b> {user['role_display']}\n"
        f"<b>–ò–º—è:</b> {user['display_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>Username:</b> @{user['username']}\n"
        f"<b>Email:</b> {user['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {user['organization'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–°–æ—Ü. —Å–µ—Ç—å:</b> {user['social_link'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–ë–∞–ª–ª—ã:</b> {user['points']}\n"
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {formatted_date}"
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile_photos = await message.bot.get_user_profile_photos(user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if user_profile_photos.total_count > 0:
        photo = user_profile_photos.photos[0][-1]
        await message.answer_photo(
            photo.file_id,
            caption=profile_text,
            reply_markup=profile_keyboard,
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            profile_text,
            reply_markup=profile_keyboard,
            parse_mode="HTML"
        )

@router.message(F.text == 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
async def change_name(message: Message, state: FSMContext):
    bot_logger.log_action(message.from_user.id, "–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏")
    await state.set_state(ProfileStates.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=cancel_keyboard)

@router.message(ProfileStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if message.text == 'üîô –û—Ç–º–µ–Ω–∞':
        bot_logger.log_action(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏")
        await state.clear()
        await profile(message)
        return

    bot_logger.log_action(
        message.from_user.id, 
        "–ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è",
        {"new_name": message.text}
    )
    db.update_user(message.from_user.id, display_name=message.text)
    await state.clear()
    await message.answer("–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await profile(message)

@router.message(F.text == 'üìß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É')
async def change_email(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é –ø–æ—á—Ç—É:", reply_markup=cancel_keyboard)

@router.message(ProfileStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    if message.text == 'üîô –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await profile(message)
        return

    db.update_user(message.from_user.id, email=message.text)
    await state.clear()
    await message.answer("–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await profile(message)

@router.message(F.text == 'üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
async def change_organization(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_organization)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:", reply_markup=cancel_keyboard)

@router.message(ProfileStates.waiting_for_organization)
async def process_organization(message: Message, state: FSMContext):
    if message.text == 'üîô –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await profile(message)
        return

    db.update_user(message.from_user.id, organization=message.text)
    await state.clear()
    await message.answer("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await profile(message)

@router.message(F.text == 'üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ü. —Å–µ—Ç—å')
async def change_social(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_social)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∏ —Ç.–¥.):",
        reply_markup=cancel_keyboard
    )

@router.message(ProfileStates.waiting_for_social)
async def process_social(message: Message, state: FSMContext):
    if message.text == 'üîô –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await profile(message)
        return

    db.update_user(message.from_user.id, social_link=message.text)
    await state.clear()
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await profile(message)

@router.message(F.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def delete_account(message: Message):
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_delete_keyboard
    )

@router.callback_query(F.data == 'confirm_delete')
async def confirm_delete_account(callback: CallbackQuery):
    db.delete_user(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if callback.from_user.id == settings.bots.admin_id:
        await callback.message.answer(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    else:
        await callback.message.answer(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

@router.callback_query(F.data == 'cancel_delete')
async def cancel_delete_account(callback: CallbackQuery):
    await callback.message.delete()
    temp_message = await callback.message.answer("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    await profile(temp_message, callback.from_user.id)

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def back_to_menu(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–æ–º
        role_id = 2 if message.from_user.id == settings.bots.admin_id else 1
        db.create_user(message.from_user.id, message.from_user.username)
        keyboard = admin_keyboard if role_id == 2 else main_keyboard
    else:
        keyboard = admin_keyboard if user['role'] == 'admin' else main_keyboard
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ... 