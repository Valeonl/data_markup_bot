from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from core.database.database import Database
from core.states.states import CommandStates
from core.keyboards.markup import (
    get_command_management_keyboard,
    get_commands_list_keyboard,
    get_command_actions_keyboard,
    get_user_markup_keyboard,
    get_command_record_keyboard,
    get_recording_review_keyboard
)
from core.keyboards.main import admin_keyboard, main_keyboard
import os
from datetime import datetime
from core.backend.audio_handler import save_voice_to_file, voice_to_text_whisper

router = Router()
db = Database('bot_database.db')

@router.message(F.text == 'üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–º–µ—Ç–∫–µ')
async def start_markup(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_markup_keyboard()
    )

@router.message(F.text == "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
async def show_available_commands(message: Message):
    commands = db.get_pending_commands(message.from_user.id)
    if not commands:
        await message.answer(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã! üéâ\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
        )
        return
    
    command = commands[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    await message.answer(
        f"üìù <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"<b>–¢–µ–≥:</b> {command['tag']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {command['description']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.",
        reply_markup=get_command_record_keyboard(command['id']),
        parse_mode="HTML"
    )

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_user_commands(message: Message):
    commands = db.get_user_commands(message.from_user.id)
    if not commands:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = "üìä <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for i, cmd in enumerate(commands, 1):
        text += (
            f"{i}. <b>{cmd['tag']}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {cmd['description']}\n"
            f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {cmd['transcript']}\n"
            f"–°—Ç–∞—Ç—É—Å: {cmd['status']}\n"
            f"–î–∞—Ç–∞: {cmd['created_at']}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data.startswith("record_cmd_"))
async def start_recording(callback: CallbackQuery, state: FSMContext):
    command_id = int(callback.data.split("_")[2])
    await state.update_data(recording_command_id=command_id)
    await state.set_state(CommandStates.waiting_for_voice)
    
    await callback.message.answer(
        "üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç–∫–æ –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã."
    )

@router.message(CommandStates.waiting_for_voice, F.voice)
async def process_voice_command(message: Message, state: FSMContext):
    data = await state.get_data()
    command_id = data['recording_command_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    command = db.get_command_by_id(command_id)
    if not command:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    base_dir = "voice_commands"
    command_dir = os.path.join(base_dir, command['tag'])
    os.makedirs(command_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{message.from_user.id}_{timestamp}.ogg"
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_path = await save_voice_to_file(message.bot, message)
        voice_path = os.path.join(command_dir, os.path.basename(voice_path))
        os.rename(voice_path, os.path.join(command_dir, filename))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
        transcript = await voice_to_text_whisper(voice_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if db.add_user_command(
            message.from_user.id,
            command_id,
            message.voice.file_id,
            voice_path,
            transcript
        ):
            await message.answer(
                "‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {transcript}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É?",
                reply_markup=get_user_markup_keyboard()
            )
            await show_available_commands(message)
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )
    finally:
        await state.clear()

@router.message(F.text == 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å')
async def my_balance(message: Message):
    user_id = message.from_user.id
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == '‚öôÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ç–∫–∏')
async def markup_editor(message: Message):
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    await message.answer(
        "üõ† <b>–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ç–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ –£–¥–∞–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã",
        parse_mode="HTML",
        reply_markup=get_command_management_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
async def add_command_start(message: Message, state: FSMContext):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    await state.set_state(CommandStates.waiting_for_command)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–æ–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ —Å 5 –ø–æ 10 –º–∏–Ω—É—Ç—É'"
    )

@router.message(CommandStates.waiting_for_command)
async def process_command_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CommandStates.waiting_for_tag)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã (–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cut_advance"
    )

@router.message(CommandStates.waiting_for_tag)
async def process_command_tag(message: Message, state: FSMContext):
    data = await state.get_data()
    description = data['description']
    tag = message.text.lower()
    
    if db.get_command_by_tag(tag):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–≥."
        )
        return
    
    if db.add_command(tag, description):
        await message.answer(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–µ–≥: {tag}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
    await state.clear()

@router.message(F.text == "üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def list_commands(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    commands = db.get_all_commands()
    if not commands:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç!")
        return
    
    text = "üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
    for cmd in commands:
        text += f"üîπ {cmd['tag']}: {cmd['description']}\n"
    
    await message.answer(
        text,
        reply_markup=get_commands_list_keyboard(commands)
    )

@router.callback_query(F.data.startswith("cmd_"))
async def command_details(callback: CallbackQuery):
    command_id = int(callback.data.split("_")[1])
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    # ... –∫–æ–¥ ...

@router.callback_query(F.data.startswith("delete_cmd_"))
async def delete_command(callback: CallbackQuery):
    command_id = int(callback.data.split("_")[2])
    if db.delete_command(command_id):
        await callback.answer("–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await list_commands(callback.message)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")

@router.callback_query(F.data == "delete_all_commands")
async def confirm_delete_all(callback: CallbackQuery):
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–º–∞–Ω–¥—ã?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                        callback_data="confirm_delete_all"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞",
                        callback_data="back_to_commands"
                    )
                ]
            ]
        )
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    
    keyboard = admin_keyboard if user['role'] == 'admin' else main_keyboard
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )

@router.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏")
async def check_recordings(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    recordings = db.get_pending_recordings()
    if not recordings:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return
    
    recording = recordings[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    await message.answer(
        f"üìù <b>–ó–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{recording['command_tag']}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {recording['command_description']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{recording['username']}\n"
        f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {recording['transcript']}\n"
        f"–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {recording['created_at']}",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer_voice(
        recording['voice_file_id'],
        caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=get_recording_review_keyboard(recording['id'])
    )

@router.callback_query(F.data.startswith("approve_rec_"))
async def approve_recording(callback: CallbackQuery):
    recording_id = int(callback.data.split("_")[2])
    points = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    
    if db.update_recording_status(recording_id, 'approved', points):
        await callback.answer("–ó–∞–ø–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–∞–ª–ª–æ–≤.")
        await check_recordings(callback.message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏!")

@router.callback_query(F.data.startswith("reject_rec_"))
async def reject_recording(callback: CallbackQuery):
    recording_id = int(callback.data.split("_")[2])
    
    if db.update_recording_status(recording_id, 'rejected'):
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await check_recordings(callback.message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏!")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π")
async def recordings_statistics(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    stats = db.get_recordings_statistics()  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
    
    await message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total']}\n"
        f"–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending']}\n"
        f"–û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n\n"
        f"–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø–∏—Å—è–º:\n"
        f"{stats['top_users']}",
        parse_mode="HTML"
    ) 