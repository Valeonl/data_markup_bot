from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from core.database.database import Database
from core.states.states import CommandStates
from core.keyboards.markup import (
    get_command_management_keyboard,
    get_commands_list_keyboard,
    get_command_actions_keyboard,
    get_user_markup_keyboard,
    get_command_record_keyboard,
    get_recording_review_keyboard
)
from core.keyboards.main import admin_keyboard, main_keyboard
import os
from datetime import datetime
from core.backend.audio_handler import save_voice_to_file, voice_to_text_whisper

router = Router()
db = Database('bot_database.db')

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
last_voice_messages = {}

@router.message(F.text == 'üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–º–µ—Ç–∫–µ')
async def start_markup(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_markup_keyboard()
    )

@router.message(F.text == "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
async def show_available_commands(message: Message):
    commands = db.get_pending_commands(message.from_user.id)
    if not commands:
        await message.answer(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã! üéâ\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
        )
        return
    
    command = commands[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    await message.answer(
        f"üìù <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"<b>–¢–µ–≥:</b> {command['tag']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {command['description']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.",
        reply_markup=get_command_record_keyboard(command['id']),
        parse_mode="HTML"
    )

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_user_commands(message: Message):
    commands = db.get_user_commands(message.from_user.id)
    if not commands:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = "üìä <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for i, cmd in enumerate(commands, 1):
        text += (
            f"{i}. <b>{cmd['tag']}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {cmd['description']}\n"
            f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {cmd['transcript']}\n"
            f"ID –∑–∞–ø–∏—Å–∏: <code>{cmd['voice_file_id']}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {cmd['status']}\n"
            f"–î–∞—Ç–∞: {cmd['created_at']}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data.startswith("record_cmd_"))
async def start_recording(callback: CallbackQuery, state: FSMContext):
    command_id = int(callback.data.split("_")[2])
    await state.update_data(recording_command_id=command_id)
    await state.set_state(CommandStates.waiting_for_voice)
    
    await callback.message.answer(
        "üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç–∫–æ –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã."
    )

@router.message(CommandStates.waiting_for_voice, F.voice)
async def process_voice_command(message: Message, state: FSMContext):
    data = await state.get_data()
    command_id = data['recording_command_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    command = db.get_command_by_id(command_id)
    if not command:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_file_id = message.voice.file_id
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
        temp_file = f"temp_{message.from_user.id}.ogg"
        await save_voice_to_file(message.bot, message, temp_file)
        transcript = await voice_to_text_whisper(temp_file)
        os.remove(temp_file)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await message.answer(
            f"üìù <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
            f"{transcript}",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if db.add_user_command(
            message.from_user.id,
            command_id,
            voice_file_id,
            transcript
        ):
            await message.answer(
                "‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"üéØ <b>–ö–æ–º–∞–Ω–¥–∞:</b> {command['tag']}\n"
                f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {command['description']}\n"
                f"üÜî <b>ID –∑–∞–ø–∏—Å–∏:</b> <code>{voice_file_id}</code>\n\n"
                f"üìù <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</b>\n{transcript}",
                parse_mode="HTML",
                reply_markup=get_user_markup_keyboard()
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            await show_available_commands(message)
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{str(e)}"
        )
        print(f"Error processing voice message: {e}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    finally:
        await state.clear()

@router.message(F.text == 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å')
async def my_balance(message: Message):
    user_id = message.from_user.id
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == '‚öôÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ç–∫–∏')
async def markup_editor(message: Message):
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    await message.answer(
        "üõ† <b>–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ç–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ –£–¥–∞–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã",
        parse_mode="HTML",
        reply_markup=get_command_management_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
async def add_command_start(message: Message, state: FSMContext):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    await state.set_state(CommandStates.waiting_for_command)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–æ–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ —Å 5 –ø–æ 10 –º–∏–Ω—É—Ç—É'"
    )

@router.message(CommandStates.waiting_for_command)
async def process_command_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CommandStates.waiting_for_tag)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã (–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: cut_advance"
    )

@router.message(CommandStates.waiting_for_tag)
async def process_command_tag(message: Message, state: FSMContext):
    data = await state.get_data()
    description = data['description']
    tag = message.text.lower()
    
    if db.get_command_by_tag(tag):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–≥."
        )
        return
    
    if db.add_command(tag, description):
        await message.answer(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–µ–≥: {tag}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
    await state.clear()

def create_commands_keyboard(commands: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üìù {cmd['tag']}",
                callback_data=f"view_cmd_{cmd['tag']}"
            )
        ]
        for cmd in commands
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã",
            callback_data="delete-all-commands"
        )
    ])
    
    return keyboard

@router.message(F.text == "üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def list_commands(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    commands = db.get_all_commands()
    if not commands:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç!")
        return
    
    keyboard = create_commands_keyboard(commands)
    
    await message.answer(
        "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("view_cmd_"))
async def view_command_recordings(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    if chat_id in last_voice_messages:
        try:
            await callback.bot.delete_message(
                chat_id=chat_id,
                message_id=last_voice_messages[chat_id]
            )
            del last_voice_messages[chat_id]
        except Exception as e:
            print(f"Error deleting voice message: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ view_cmd_ –∫–∞–∫ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã
    command_tag = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "view_cmd_"
    recordings = db.get_command_recordings(command_tag)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if recordings:
        keyboard.inline_keyboard.extend([
            [
                InlineKeyboardButton(
                    text=f"üéß {rec['username'] or '–ê–Ω–æ–Ω–∏–º'}",
                    callback_data=f"play_rec_{rec['id']}"
                )
            ]
            for rec in recordings
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.inline_keyboard.extend([
        [
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                callback_data=f"delete_cmd_{command_tag}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥",
                callback_data="back_to_commands"
            )
        ]
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if recordings:
        first_rec = recordings[0]
        text = (
            f"üéØ <b>–ö–æ–º–∞–Ω–¥–∞: {first_rec['command_tag']}</b>\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {first_rec['command_description']}\n\n"
            f"<b>–ó–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        )
        
        for i, rec in enumerate(recordings, 1):
            status_emoji = "‚úÖ" if rec['status'] == 'approved' else "‚ùå" if rec['status'] == 'rejected' else "‚è≥"
            text += (
                f"{i}. –û—Ç: @{rec['username'] or '–ê–Ω–æ–Ω–∏–º'}\n"
                f"üë§ {rec['display_name']}\n"
                f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {rec['transcript']}\n"
                f"üìÖ –î–∞—Ç–∞: {rec['created_at']}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji}\n\n"
            )
    else:
        text = (
            f"üéØ <b>–ö–æ–º–∞–Ω–¥–∞: {command_tag}</b>\n"
            f"–î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("play_rec_"))
async def play_recording(callback: CallbackQuery):
    recording_id = int(callback.data.split("_")[2])
    voice_file_id = db.get_voice_file_id(recording_id)
    chat_id = callback.message.chat.id
    
    if voice_file_id:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if chat_id in last_voice_messages:
            try:
                await callback.bot.delete_message(
                    chat_id=chat_id,
                    message_id=last_voice_messages[chat_id]
                )
            except Exception as e:
                print(f"Error deleting previous voice message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
        voice_message = await callback.message.answer_voice(
            voice_file_id,
            caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_voice_messages[chat_id] = voice_message.message_id
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

@router.callback_query(F.data.startswith("back_to_recordings_"))
async def back_to_recordings(callback: CallbackQuery):
    command_tag = callback.data.split("_")[3]
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
    await callback.message.delete()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    await view_command_recordings(callback)

@router.callback_query(F.data == "back_to_commands")
async def back_to_commands_list(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥
    if chat_id in last_voice_messages:
        try:
            await callback.bot.delete_message(
                chat_id=chat_id,
                message_id=last_voice_messages[chat_id]
            )
            del last_voice_messages[chat_id]
        except Exception as e:
            print(f"Error deleting voice message: {e}")
    
    commands = db.get_all_commands()
    if not commands:
        await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç!")
        return
    
    keyboard = create_commands_keyboard(commands)
    
    await callback.message.edit_text(
        "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("cmd_"))
async def command_details(callback: CallbackQuery):
    command_id = int(callback.data.split("_")[1])
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    # ... –∫–æ–¥ ...

@router.callback_query(F.data.startswith("delete_cmd_"))
async def confirm_delete_command(callback: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "delete_cmd_" –±–µ–∑ —Ç–∏—Ä–µ
    command_tag = callback.data.replace("delete_cmd_", "")
    recordings_count = db.get_command_recordings_count(command_tag)
    
    if recordings_count == 0:
        if db.delete_command_by_tag(command_tag):
            await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –∫–æ–º–∞–Ω–¥—ã
            commands = db.get_all_commands()
            if not commands:
                await callback.message.edit_text(
                    "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç!",
                    parse_mode="HTML"
                )
            else:
                await back_to_commands_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!", show_alert=True)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm-delete-{command_tag}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data=f"view_cmd_{command_tag}"
                )
            ]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã <b>{command_tag}</b> —Å—É—â–µ—Å—Ç–≤—É–µ—Ç "
            f"{recordings_count} –∑–∞–ø–∏—Å–µ–π.\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É?\n"
            f"–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("confirm-delete-"))
async def execute_delete_command(callback: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "confirm-delete-" –±–µ–∑ —Ç–∏—Ä–µ
    command_tag = callback.data.replace("confirm-delete-", "")
    
    if db.delete_command_by_tag(command_tag):
        await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏ –≤—Å–µ –µ—ë –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
        await back_to_commands_list(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!", show_alert=True)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    
    keyboard = admin_keyboard if user['role'] == 'admin' else main_keyboard
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )

@router.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏")
async def check_recordings(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    recordings = db.get_pending_recordings()
    if not recordings:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return
    
    recording = recordings[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    await message.answer(
        f"üìù <b>–ó–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{recording['command_tag']}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {recording['command_description']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{recording['username']}\n"
        f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {recording['transcript']}\n"
        f"ID –∑–∞–ø–∏—Å–∏: <code>{recording['voice_file_id']}</code>\n"
        f"–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {recording['created_at']}",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer_voice(
        recording['voice_file_id'],
        caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=get_recording_review_keyboard(recording['id'])
    )

@router.callback_query(F.data.startswith("approve_rec_"))
async def approve_recording(callback: CallbackQuery):
    recording_id = int(callback.data.split("_")[2])
    points = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    
    if db.update_recording_status(recording_id, 'approved', points):
        await callback.answer("–ó–∞–ø–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–∞–ª–ª–æ–≤.")
        await check_recordings(callback.message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏!")

@router.callback_query(F.data.startswith("reject_rec_"))
async def reject_recording(callback: CallbackQuery):
    recording_id = int(callback.data.split("_")[2])
    
    if db.update_recording_status(recording_id, 'rejected'):
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await check_recordings(callback.message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏!")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π")
async def recordings_statistics(message: Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    stats = db.get_recordings_statistics()  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
    
    await message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total']}\n"
        f"–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending']}\n"
        f"–û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n\n"
        f"–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø–∏—Å—è–º:\n"
        f"{stats['top_users']}",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "delete-all-commands")
async def confirm_delete_all_commands(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø–∏—Å–µ–π
    total_commands = len(db.get_all_commands())
    total_recordings = db.get_total_recordings_count()  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ Database
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë",
                callback_data="confirm-delete-all"
            )
        ],
        [
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞",
                callback_data="back_to_commands"
            )
        ]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> –∫–æ–º–∞–Ω–¥—ã!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_recordings}\n\n"
        f"‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "confirm-delete-all")
async def execute_delete_all_commands(callback: CallbackQuery):
    print(f"Starting delete all commands process...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    commands = db.get_all_commands()
    print(f"Current commands before deletion: {commands}")
    
    if not commands:
        print("No commands found to delete")
        await callback.answer("–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    print("Attempting to delete all commands...")
    deletion_result = db.delete_all_commands()
    print(f"Deletion result: {deletion_result}")
    
    if deletion_result:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
        remaining_commands = db.get_all_commands()
        print(f"Remaining commands after deletion: {remaining_commands}")
        
        if not remaining_commands:
            print("All commands successfully deleted")
            await callback.answer("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
            await callback.message.edit_text(
                "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç!",
                parse_mode="HTML"
            )
        else:
            print(f"Warning: {len(remaining_commands)} commands still remain")
            await callback.answer("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω—ã –Ω–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!", show_alert=True)
            await back_to_commands_list(callback)
    else:
        print("Error occurred during deletion")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥!", show_alert=True)
        await back_to_commands_list(callback) 